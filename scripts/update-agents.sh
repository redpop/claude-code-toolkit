#!/usr/bin/env bash
set -euo pipefail

# Dynamic agent documentation updater
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"
AGENTS_DIR="$ROOT_DIR/agents"
README_FILE="$ROOT_DIR/README.md"
DOCS_DIR="$ROOT_DIR/docs/agents"
TEMP_FILE=$(mktemp)

# Clean up on exit
trap "rm -f $TEMP_FILE" EXIT

echo "=== Dynamic Agent Documentation Generator ==="
echo ""

# Function to extract frontmatter field
extract_field() {
    local file="$1"
    local field="$2"
    local default="${3:-}"

    # Extract content between --- markers (frontmatter)
    local frontmatter
    frontmatter=$(sed -n '/^---$/,/^---$/p' "$file" 2>/dev/null | sed '1d;$d')

    if [[ -n "$frontmatter" ]]; then
        # Try to extract the field value
        local value
        value=$(echo "$frontmatter" | grep "^${field}:" | sed "s/^${field}:[[:space:]]*//" | sed 's/^["'"'"']//' | sed 's/["'"'"']$//')

        if [[ -n "$value" ]]; then
            echo "$value"
        else
            echo "$default"
        fi
    else
        echo "$default"
    fi
}

# Function to format category for display
format_category() {
    local category="$1"

    case "$category" in
        typo3)
            echo "TYPO3"
            ;;
        analysis)
            echo "Analysis"
            ;;
        architecture)
            echo "Architecture"
            ;;
        frontend)
            echo "Frontend"
            ;;
        operations)
            echo "Operations"
            ;;
        research)
            echo "Research"
            ;;
        security)
            echo "Security"
            ;;
        testing)
            echo "Testing"
            ;;
        documentation)
            echo "Documentation"
            ;;
        git)
            echo "Git"
            ;;
        *)
            # Capitalize first letter
            echo "${category^}"
            ;;
    esac
}

# Function to generate agent documentation link
generate_doc_link() {
    local agent_name="$1"
    local category="$2"
    local doc_file="$DOCS_DIR/$category/$agent_name.md"

    if [[ -f "$doc_file" ]]; then
        echo "[${agent_name}](docs/agents/$category/$agent_name.md)"
    else
        echo "${agent_name}"
    fi
}

# Function to truncate text if too long
truncate_text() {
    local text="$1"
    local max_length="${2:-100}"

    if [[ ${#text} -gt $max_length ]]; then
        echo "${text:0:$((max_length-3))}..."
    else
        echo "$text"
    fi
}

# Function to clean tools list
clean_tools() {
    local tools="$1"

    if [[ "$tools" != "-" && -n "$tools" ]]; then
        # Remove spaces after commas for consistency and truncate if too long
        tools=$(echo "$tools" | sed 's/, */,/g')
        tools=$(truncate_text "$tools" 50)
    fi

    echo "$tools"
}

# Count agents (excluding CLAUDE.md)
AGENT_COUNT=$(find "$AGENTS_DIR" -name "*.md" ! -name "CLAUDE.md" | wc -l | tr -d ' ')
echo "Found $AGENT_COUNT agents to process"

# Collect all agents and categorize them
declare -A agents_by_category
declare -A agent_descriptions
declare -A agent_tools

# Process all agent files
for agent_file in "$AGENTS_DIR"/*.md; do
    [[ -f "$agent_file" ]] || continue

    agent_name=$(basename "$agent_file" .md)

    # Skip CLAUDE.md
    [[ "$agent_name" == "CLAUDE" ]] && continue

    # Extract frontmatter fields
    category=$(extract_field "$agent_file" "category" "analysis")
    description=$(extract_field "$agent_file" "description" "No description available")
    tools=$(extract_field "$agent_file" "tools" "-")

    # Process data
    description=$(truncate_text "$description" 100)
    tools=$(clean_tools "$tools")

    # Store agent info
    if [[ -z "${agents_by_category[$category]:-}" ]]; then
        agents_by_category[$category]="$agent_name"
    else
        agents_by_category[$category]="${agents_by_category[$category]}|$agent_name"
    fi

    agent_descriptions["$agent_name"]="$description"
    agent_tools["$agent_name"]="$tools"
done

# Start building the agent content
{
    echo "<!-- AGENTS:START -->"
    echo "<!-- This section is auto-generated by scripts/update-agents.sh - DO NOT EDIT MANUALLY -->"
    echo ""
    echo "### ðŸ“‹ Agent Catalog"
    echo ""
    echo "Specialized AI agents provide domain expertise for various development tasks. Each agent name links to detailed documentation."
    echo ""

    # Sort categories
    sorted_categories=($(printf '%s\n' "${!agents_by_category[@]}" | sort))

    # Generate table for each category
    for category in "${sorted_categories[@]}"; do
        formatted_category=$(format_category "$category")

        echo "#### $formatted_category Agents"
        echo ""
        echo "| Agent | Purpose | Tools |"
        echo "|-------|---------|-------|"

        # Sort agents within category
        IFS='|' read -ra agent_list <<< "${agents_by_category[$category]}"
        sorted_agents=($(printf '%s\n' "${agent_list[@]}" | sort))

        for agent_name in "${sorted_agents[@]}"; do
            agent_link=$(generate_doc_link "$agent_name" "$category")
            description="${agent_descriptions[$agent_name]}"
            tools="${agent_tools[$agent_name]}"

            echo "| $agent_link | $description | $tools |"
        done
        echo ""
    done

    # Add summary statistics
    total_agents=0
    for category in "${!agents_by_category[@]}"; do
        IFS='|' read -ra agent_list <<< "${agents_by_category[$category]}"
        total_agents=$((total_agents + ${#agent_list[@]}))
    done

    echo "**Total Agents**: $total_agents across ${#agents_by_category[@]} categories"
    echo ""
    echo "<!-- AGENTS:END -->"

} > "$TEMP_FILE"

# Replace the content between markers using sed
if ! grep -q "<!-- AGENTS:START -->" "$README_FILE"; then
    echo "ERROR: Could not find agent markers in README.md"
    echo "Please add the following markers where you want the agent documentation:"
    echo "<!-- AGENTS:START -->"
    echo "<!-- AGENTS:END -->"
    exit 1
fi

# Use awk to replace content between markers
awk '
    /<!-- AGENTS:START -->/ {
        print
        while ((getline line < "'"$TEMP_FILE"'") > 0) {
            if (line !~ /<!-- AGENTS:START -->/) {
                print line
            }
        }
        close("'"$TEMP_FILE"'")
        skip = 1
        next
    }
    /<!-- AGENTS:END -->/ {
        skip = 0
        next
    }
    !skip { print }
' "$README_FILE" > "${README_FILE}.tmp"

mv "${README_FILE}.tmp" "$README_FILE"

echo ""
echo "âœ“ README.md updated successfully"
echo ""
echo "=== Update Complete ==="
echo "Agent documentation has been updated with $total_agents agents across ${#agents_by_category[@]} categories."